
SELECT * FROM EMPLOYEES;

SELECT * FROM DEPARTMENTS;

SELECT * FROM JOBS;

SELECT * FROM LOCATIONS;

SELECT * FROM COUNTRIES;

SELECT * FROM REGIONS;


/*
 * EMPLOYEES 테이블을 조회 할 때 JOB_ID, DEPAERTMENT_ID 가 ID가 아닌
 * NAME 으로 조회 될 수 있도록 JOIN 을 활용한다.
 * (서브쿼리도 사용 가능하기 때문에 서브쿼리로도 만들어 본다.)
 */
SELECT E.EMPLOYEE_ID
     , E.FIRST_NAME
     , E.LAST_NAME
     , E.EMAIL
     , E.PHONE_NUMBER
     , E.HIRE_DATE
     , J.JOB_TITLE
     , E.SALARY
     , E.COMMISSION_PCT
     , E.MANAGER_ID
     , D.DEPARTMENT_NAME
  FROM EMPLOYEES E
  JOIN JOBS J
    ON E.JOB_ID = J.JOB_ID
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT EMPLOYEE_ID
     , FIRST_NAME
     , LAST_NAME
     , EMAIL
     , PHONE_NUMBER
     , HIRE_DATE
     , (SELECT JOB_TITLE FROM JOBS J WHERE E.JOB_ID = J.JOB_ID) AS JOB_TITLE
     , SALARY
     , COMMISSION_PCT
     , MANAGER_ID
     , (SELECT DEPARTMENT_NAME FROM DEPARTMENTS D WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID) AS DEPARTMENT_NAME
  FROM EMPLOYEES E;

/*
 * DEPARTMENTS 테이블과 LOCATIONS 테이블을 사용하여 각 부서가 어느 지역에 위치하고
 * 있는지 JOIN 을 활용하여 조회한다.
 * (서브쿼리로도 사용 가능하기 때문에 서브 쿼리로도 만들어 본다.)
 */
SELECT D.DEPARTMENT_ID
     , D.DEPARTMENT_NAME
     , D.MANAGER_ID
     , L.LOCATION_ID
     , L.STREET_ADDRESS
     , L.POSTAL_CODE
     , L.CITY
     , L.STATE_PROVINCE
     , L.COUNTRY_ID
  FROM DEPARTMENTS D
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID;

SELECT D.DEPARTMENT_ID
     , D.DEPARTMENT_NAME
     , D.MANAGER_ID
     , D.LOCATION_ID
     , (SELECT STREET_ADDRESS FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS STREET_ADDRESS
     , (SELECT POSTAL_CODE FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS POSTAL_CODE
     , (SELECT CITY FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS CITY
     , (SELECT STATE_PROVINCE FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS STATE_PROVINCE
     , (SELECT COUNTRY_ID FROM LOCATIONS L WHERE D.LOCATION_ID = L.LOCATION_ID) AS COUNTRY_ID
  FROM DEPARTMENTS D;
 
/*
 * LOCATIONS 테이블과 COUNTRIES, REGIONS 테이블을 사용하여 각 지역이
 * 어느 나라 그리고 어떤 대륙에 위치하는지 JOIN 을 활용하여 조회 한다.
 */
SELECT R.REGION_NAME
     , C.COUNTRY_NAME
     , L.CITY || ' ' || DECODE(L.STATE_PROVINCE, NULL, '', CONCAT(L.STATE_PROVINCE, ' ')) || L.STREET_ADDRESS AS ADDRESS
     , L.POSTAL_CODE
  FROM LOCATIONS L
  JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
  JOIN REGIONS R
    ON C.REGION_ID = R.REGION_ID
 ORDER BY 1, 2;

/*
 * 대륙별 직원 수를 파악하기 위한 조회 쿼리를 만든다.
 */
SELECT R.REGION_NAME AS 대륙구분
     , COUNT(*) AS 직원수
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
  JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
  JOIN REGIONS R
    ON C.REGION_ID = R.REGION_ID
 GROUP BY R.REGION_NAME;

/*
 * 나라별 직원 수를 파악하기 위한 조회 쿼리를 만든다.
 */
SELECT C.COUNTRY_NAME AS 나라구분
     , COUNT(*) AS 직원수
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
  JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
  JOIN REGIONS R
    ON C.REGION_ID = R.REGION_ID
 GROUP BY C.COUNTRY_NAME;

/* 
 * 대륙별, 나라별 직원 수를 파악하기 위한 집계 쿼리를 만든다.
 */
SELECT DECODE(GROUPING(R.REGION_NAME), 1, '총계', R.REGION_NAME) AS 대륙구분
     , DECODE(GROUPING(C.COUNTRY_NAME), 1, DECODE(GROUPING(R.REGION_NAME), 1, ' ', '소계'), C.COUNTRY_NAME) AS 나라구분
     , COUNT(*) AS 직원수
  FROM EMPLOYEES E
  JOIN DEPARTMENTS D
    ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
  JOIN LOCATIONS L
    ON D.LOCATION_ID = L.LOCATION_ID
  JOIN COUNTRIES C
    ON L.COUNTRY_ID = C.COUNTRY_ID
  JOIN REGIONS R
    ON C.REGION_ID = R.REGION_ID
 GROUP BY ROLLUP(R.REGION_NAME, C.COUNTRY_NAME);








